#include "../../includes/parsing.h"
#include <fcntl.h>
#include <unistd.h>

int	copy_path_texture(char **config_texture, char *buf, char *dir)
{
	char	**tmp;
	char	*path;

	tmp = ft_split(buf, ' ');
	if (ft_strlen_2d((const char **)tmp) != 2)
	{
		ft_free((void *)&tmp);
		return (1);
	}
	path = ft_strtrim(tmp[1], "\n");
	if (open(path, O_RDONLY) < 0)
	{
		ft_free_strs(tmp);
		ft_free((void *)&path);
		return (1);
	}
	*config_texture = ft_strdup(path);
	ft_free_strs(tmp);
	ft_free((void *)&path);
	return (0);
}

void	get_color(t_texture *config, char *buf, char way)
{
	char	**colors;
	char	*tmp;
	char	*cpy;

	if (buf[0] && buf[0] == way && buf[1] && buf[1] == ' ')
	{
		tmp = ft_strdup(&buf[2]);
		cpy = malloc(sizeof(char) * ft_strlen(tmp));
		ft_strlcpy(cpy, tmp, ft_strlen(tmp));
		colors = ft_split(cpy, ',');
		ft_free((void *)&tmp);
		ft_free((void *)&cpy);
		if (ft_strlen_2d((const char **)colors) != 3)
			free_texture_exit(*config, buf);
		if (way == 'F')
			config->floor = convert_str_rgb_to_int(colors, *config, buf);
		if (way == 'C')
			config->ceiling = convert_str_rgb_to_int(colors, *config, buf);
	}
	else
		free_texture_exit(*config, buf);
}

void	configuration(int fd, t_texture *config, t_map *map)
{
	int			check;
	char		*buf;
	char		*tmp;

	while (1)
	{
		buf = get_next_line(fd);
		if (!buf)
			free_texture_exit(*config, buf);
		ft_free((void *)&buf);
		tmp = ft_strtrim(buf, " \n");
		if (ft_strlen(tmp) == 0)
		{
		}
		else if (buf && ft_strncmp(tmp, "NO", 2) == 0 && config->no == NULL)
			copy_path_texture(&config->no, tmp, "NO");
		else if (buf && ft_strncmp(tmp, "SO", 2) == 0 && config->so == NULL)
			copy_path_texture(&config->so, tmp, "SO");
		else if (buf && ft_strncmp(tmp, "WE", 2) == 0 && config->we == NULL)
			copy_path_texture(&config->we, tmp, "WE");
		else if (buf && ft_strncmp(tmp, "EA", 2) == 0 && config->ea == NULL)
			copy_path_texture(&config->ea, tmp, "EA");
		else if (buf && ft_strncmp(tmp, "F", 1) == 0 && config->floor == -1)
			get_color(config, tmp, 'F');
		else if (buf && ft_strncmp(tmp, "C", 2) == 0 && config->ceiling == -1)
			get_color(config, tmp, 'C');
		else
		{
		//	get_map(config, tmp, map);
			ft_printf("getting map\n");
			break ;
		}
		ft_free((void *)&tmp);
	}
}

void	map_check(char	*av)
{
	int			fd;
	t_texture	config;
	t_map		map;

	fd = open(av, O_RDONLY);
	config = init_texture();
	map.map = NULL;
	if (fd < 0)
		print_error_exit("Open error\n");
	configuration(fd, &config, &map);
	ft_printf("no:%s\nso:%s\nea:%s\nwe:%s\nfloor:%d\nceiling:%d\n",
		config.no, config.so, config.ea, config.we,
		config.floor, config.ceiling);
	ft_free((void *)&config.no);
	ft_free((void *)&config.so);
	ft_free((void *)&config.ea);
	ft_free((void *)&config.we);
}
